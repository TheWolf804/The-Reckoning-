#include "raylib.h"
#include "raymath.h"
#include <stdlib.h>
#include <stdbool.h>

#define MAX_ENEMIES 5
#define MAX_FIREBALLS 10
#define PERKS_PER_CATEGORY 3
#define PERK_ICON_RADIUS 25
#define MAX_PLAYER_LEVEL 50  // Max level cap added

// --- Structs ---
typedef struct PlayerStats {
    int lightDamage;
    int heavyDamage;
    int fireballDamage;
    float moveSpeed;
    int maxHealth;
    float blockDamageReduction;
} PlayerStats;

typedef struct Player {
    Vector3 position;
    Vector3 velocity;
    int health;
    bool onGround;
    int jumpCount;
    bool blocking;
    bool attacking;
    int xp;
    int level;
    int perkPoints;
    int perks[5];
    PlayerStats stats;
} Player;

typedef struct Enemy {
    Vector3 position;
    int health;
    bool active;
    bool attacking;
    bool staggered;
    Vector3 patrolPoints[2];
    int patrolTarget;
} Enemy;

typedef struct Fireball {
    Vector3 position;
    Vector3 velocity;
    bool active;
    int damage;
} Fireball;

typedef struct Perk {
    const char* name;
    const char* description;
    int levelRequired;
} Perk;

typedef struct PerkCategory {
    const char* name;
    Perk perks[PERKS_PER_CATEGORY];
} PerkCategory;

// --- Menu System ---
typedef enum MenuScreen {
    MENU_START,
    MENU_SETTINGS,
    MENU_AUDIO,
    MENU_VIDEO,
    MENU_DIFFICULTY,
    MENU_GAME,
    MENU_EXIT
} MenuScreen;

// --- Globals ---
Player player;
Enemy enemies[MAX_ENEMIES];
Fireball fireballs[MAX_FIREBALLS];
Camera3D camera;
float deltaTime;
bool isDead = false;
bool showPerkMenu = false;
Vector2 mousePos;
int selectedCategory = 0;
int selectedPerk = -1;

MenuScreen currentScreen = MENU_START;
int mainMenuSelection = 0;
int settingsMenuSelection = 0;

// Audio/Video/Difficulty options
float masterVolume = 1.0f;
float musicVolume = 1.0f;
float sfxVolume = 1.0f;
bool fullscreen = false;
int screenWidth = 800;
int screenHeight = 600;
int difficulty = 1; // 0: Easy, 1: Normal, 2: Hard

PerkCategory perkCategories[5] = {
    {"BRAWLER", {
        {"Power Punch", "Light attacks deal +5 damage", 1},
        {"Iron Fist", "Heavy attacks deal +10 damage", 3},
        {"Berserker", "Take 20% less damage when blocking", 5},
    }},
    {"MAGE", {
        {"Fireball Mastery", "Fireballs deal +10 damage", 1},
        {"Mana Surge", "Faster fireball cooldown", 3},
        {"Arcane Shield", "Fireball blocks stagger when hit", 5},
    }},
    {"KNIGHT", {
        {"Shield Bash", "Blocking stuns enemies on contact", 1},
        {"Fortress", "Health increased by 20", 3},
        {"Vengeance", "Enemies take damage when blocking your attack", 5},
    }},
    {"WARRIOR", {
        {"Dash Attack", "Enemies staggered when dashing", 1},
        {"Battle Cry", "Temporarily boost damage after killing enemy", 3},
        {"Unbreakable", "Resist stagger effects", 5},
    }},
    {"LEGEND", {
        {"Legendary Strength", "Increase overall damage by 15%", 1},
        {"Legendary Speed", "Increase movement speed by 20%", 3},
        {"Legendary Vitality", "Increase max health by 50", 5},
    }},
};

// --- Function Prototypes ---
void InitGame(void);
void UpdatePlayer(float delta);
void UpdateEnemies(float delta);
void UpdateFireballs(float delta);
void SpawnFireball(void);
void DrawGame(void);
void DrawHealthBar(Vector3 position, int health, int maxHealth);
void ResetGame(void);
void UpdatePerkMenu(void);
void DrawPerkMenu(void);
void ApplyPerkEffects(void);

// --- Menu Functions ---
void UpdateMainMenu(void);
void DrawMainMenu(void);
void UpdateSettingsMenu(void);
void DrawSettingsMenu(void);
void UpdateAudioMenu(void);
void DrawAudioMenu(void);
void UpdateVideoMenu(void);
void DrawVideoMenu(void);
void UpdateDifficultyMenu(void);
void DrawDifficultyMenu(void);

// --- Main ---
int main(void)
{
    InitWindow(screenWidth, screenHeight, "The Reckoning - 3D Raylib RPG with Menu");
    InitAudioDevice();
    InitGame();
    SetTargetFPS(60);

    while (!WindowShouldClose())
    {
        deltaTime = GetFrameTime();
        mousePos = GetMousePosition();

        switch(currentScreen) {
            case MENU_START: UpdateMainMenu(); break;
            case MENU_SETTINGS: UpdateSettingsMenu(); break;
            case MENU_AUDIO: UpdateAudioMenu(); break;
            case MENU_VIDEO: UpdateVideoMenu(); break;
            case MENU_DIFFICULTY: UpdateDifficultyMenu(); break;
            case MENU_GAME:
                // --- FIX: Toggle Perk Menu ---
                if (IsKeyPressed(KEY_Z)) showPerkMenu = !showPerkMenu;

                if (!isDead && !showPerkMenu) {
                    UpdatePlayer(deltaTime);
                    UpdateEnemies(deltaTime);
                    UpdateFireballs(deltaTime);
                }
                else if (showPerkMenu) UpdatePerkMenu();
                else if (IsKeyPressed(KEY_SPACE)) ResetGame();
                break;
            case MENU_EXIT:
                CloseAudioDevice();
                CloseWindow();
                return 0;
        }

        BeginDrawing();
        ClearBackground(RAYWHITE);

        switch(currentScreen) {
            case MENU_START: DrawMainMenu(); break;
            case MENU_SETTINGS: DrawSettingsMenu(); break;
            case MENU_AUDIO: DrawAudioMenu(); break;
            case MENU_VIDEO: DrawVideoMenu(); break;
            case MENU_DIFFICULTY: DrawDifficultyMenu(); break;
            case MENU_GAME:
                BeginMode3D(camera);
                DrawGame();
                EndMode3D();

                if (isDead)
                    DrawText("YOU DIED - Press SPACE to Restart", GetScreenWidth()/2 - 170, GetScreenHeight()/2, 30, RED);

                if (showPerkMenu) DrawPerkMenu();
                else {
                    DrawText(TextFormat("Health: %d/%d  Level: %d  XP: %d  Perk Points: %d",
                                player.health, player.stats.maxHealth, player.level, player.xp, player.perkPoints), 10, 10, 20, RED);
                    DrawText("WASD to move, SPACE to jump, SHIFT to block", 10, 40, 15, DARKGRAY);
                    DrawText("Left Click: Light attack, Right Click: Heavy attack, R: Fireball", 10, 60, 15, DARKGRAY);
                    DrawText("Press Z to open Perks Menu", 10, 80, 15, DARKGRAY);
                    DrawText("Press 1-5 to switch fighting styles", 10, 100, 15, DARKGRAY);
                }
                break;
            default: break;
        }

        EndDrawing();
    }

    CloseAudioDevice();
    CloseWindow();
    return 0;
}

// --- Initialize game ---
void InitGame(void)
{
    player.position = (Vector3){ 0.0f, 1.0f, 0.0f };
    player.velocity = (Vector3){ 0,0,0 };
    player.health = 100;
    player.onGround = true;
    player.jumpCount = 0;
    player.blocking = false;
    player.attacking = false;
    player.xp = 0;
    player.level = 1;
    player.perkPoints = 0;
    for (int i=0;i<5;i++) player.perks[i]=-1;

    isDead = false;
    showPerkMenu = false;
    selectedCategory = 0;
    selectedPerk = -1;

    for (int i=0;i<MAX_ENEMIES;i++) {
        enemies[i].position = (Vector3){ (float)(rand()%20-10), 1.0f, (float)(rand()%20-10) };
        enemies[i].health = 50;
        enemies[i].active = true;
        enemies[i].attacking = false;
        enemies[i].staggered = false;
        enemies[i].patrolPoints[0] = enemies[i].position;
        enemies[i].patrolPoints[1] = (Vector3){ enemies[i].position.x + 5.0f, 1.0f, enemies[i].position.z + 5.0f };
        enemies[i].patrolTarget = 1;
    }

    for (int i=0;i<MAX_FIREBALLS;i++) fireballs[i].active = false;

    camera.position = (Vector3){ 0.0f, 10.0f, 10.0f };
    camera.target = player.position;
    camera.up = (Vector3){ 0,1,0 };
    camera.fovy = 45.0f;
    camera.projection = CAMERA_PERSPECTIVE;

    ApplyPerkEffects();
}

// --- Player ---
void UpdatePlayer(float delta)
{
    Vector3 move = {0,0,0};
    if (IsKeyDown(KEY_W)) move.z -= 1;
    if (IsKeyDown(KEY_S)) move.z += 1;
    if (IsKeyDown(KEY_A)) move.x -= 1;
    if (IsKeyDown(KEY_D)) move.x += 1;

    if (Vector3Length(move) > 0) {
        move = Vector3Normalize(move);
        player.position.x += move.x * player.stats.moveSpeed * delta;
        player.position.z += move.z * player.stats.moveSpeed * delta;
    }

    player.velocity.y -= 20.0f * delta;
    player.position.y += player.velocity.y * delta;

    if (player.position.y <= 1.0f) {
        player.position.y = 1.0f;
        player.onGround = true;
        player.jumpCount = 0;
        player.velocity.y = 0;
    }

    if (IsKeyPressed(KEY_SPACE) && (player.onGround || player.jumpCount < 2)) {
        player.velocity.y = 8.0f;
        player.onGround = false;
        player.jumpCount++;
    }

    player.blocking = IsKeyDown(KEY_LEFT_SHIFT);
    player.attacking = false;

    int lightDamage = player.stats.lightDamage;
    int heavyDamage = player.stats.heavyDamage;

    if (IsMouseButtonPressed(MOUSE_LEFT_BUTTON)) {
        player.attacking = true;
        for (int i=0;i<MAX_ENEMIES;i++)
            if (enemies[i].active && Vector3Distance(player.position, enemies[i].position) < 2.5f) {
                enemies[i].health -= lightDamage;
                enemies[i].staggered = true;
            }
    }

    if (IsMouseButtonPressed(MOUSE_RIGHT_BUTTON)) {
        player.attacking = true;
        for (int i=0;i<MAX_ENEMIES;i++)
            if (enemies[i].active && Vector3Distance(player.position, enemies[i].position) < 3.5f) {
                enemies[i].health -= heavyDamage;
                enemies[i].staggered = true;
            }
    }

    if (IsKeyPressed(KEY_R)) SpawnFireball();

    Vector3 camTarget = player.position;
    Vector3 camPos = { player.position.x, player.position.y + 10.0f, player.position.z + 10.0f };
    camera.target = Vector3Lerp(camera.target, camTarget, 5.0f*delta);
    camera.position = Vector3Lerp(camera.position, camPos, 5.0f*delta);

    if (player.health <= 0) { player.health = 0; isDead = true; }
}

// --- Enemies ---
void UpdateEnemies(float delta)
{
    static float staggerTimers[MAX_ENEMIES] = {0};
    static float dashCooldowns[MAX_ENEMIES] = {0};

    for (int i=0;i<MAX_ENEMIES;i++) {
        if (!enemies[i].active) continue;
        Enemy *e = &enemies[i];

        if (e->health <= 0) {
            e->active = false;
            player.xp += 20;

            while (player.xp >= player.level*100 && player.level < MAX_PLAYER_LEVEL) {
                player.xp -= player.level*100;
                player.level++;
                player.perkPoints++;
                player.health = player.stats.maxHealth;
            }
            if (player.level >= MAX_PLAYER_LEVEL) {
                player.level = MAX_PLAYER_LEVEL;
                player.xp = 0;
            }

            continue;
        }

        Vector3 target = e->patrolPoints[e->patrolTarget];
        Vector3 dir = Vector3Subtract(target, e->position);
        float dist = Vector3Length(dir);
        if (dist < 0.1f) e->patrolTarget = (e->patrolTarget + 1) % 2;
        else {
            dir = Vector3Normalize(dir);
            e->position.x += dir.x * 2.0f * delta;
            e->position.z += dir.z * 2.0f * delta;
        }

        float distToPlayer = Vector3Distance(e->position, player.position);
        if (distToPlayer < 6.0f && !e->staggered) {
            if (dashCooldowns[i] > 0) dashCooldowns[i] -= delta;
            if (distToPlayer > 2.0f && dashCooldowns[i] <= 0) {
                Vector3 dashDir = Vector3Normalize(Vector3Subtract(player.position, e->position));
                e->position.x += dashDir.x * 8.0f * delta;
                e->position.z += dashDir.z * 8.0f * delta;
                dashCooldowns[i] = 3.0f;
            } else if (distToPlayer <= 2.0f && !e->attacking) e->attacking = true;
        }

        if (e->staggered) {
            staggerTimers[i] += delta;
            if (staggerTimers[i] > 1.0f) { e->staggered=false; staggerTimers[i]=0; }
        }

        if (e->attacking) {
            if (distToPlayer < 2.0f) {
                int damage = 8;
                if (player.level > 40) damage = 14;
                else if (player.level > 30) damage = 12;
                else if (player.level > 20) damage = 10;
                else if (player.level > 10) damage = 9;

                if (player.blocking) damage = (int)(damage * player.stats.blockDamageReduction);
                player.health -= damage;
                e->attacking = false;
            } else e->attacking = false;
        }
    }
}

// --- Fireballs ---
void SpawnFireball(void)
{
    for (int i=0;i<MAX_FIREBALLS;i++) {
        if (!fireballs[i].active) {
            fireballs[i].active = true;
            fireballs[i].position = player.position;
            Vector3 forward = Vector3Normalize(Vector3Subtract(camera.target, camera.position));
            fireballs[i].velocity = Vector3Scale(forward, 10.0f);
            fireballs[i].damage = player.stats.fireballDamage;
            break;
        }
    }
}

void UpdateFireballs(float delta)
{
    for (int i=0;i<MAX_FIREBALLS;i++) {
        if (!fireballs[i].active) continue;
        fireballs[i].position.x += fireballs[i].velocity.x*delta;
        fireballs[i].position.y += fireballs[i].velocity.y*delta;
        fireballs[i].position.z += fireballs[i].velocity.z*delta;

        for (int j=0;j<MAX_ENEMIES;j++)
            if (enemies[j].active && Vector3Distance(fireballs[i].position,enemies[j].position)<1.5f) {
                enemies[j].health -= fireballs[i].damage;
                enemies[j].staggered = true;
                fireballs[i].active = false;
                break;
            }

        if (Vector3Distance(fireballs[i].position, player.position) > 30.0f)
            fireballs[i].active = false;
    }
}

// --- Drawing ---
void DrawGame(void)
{
    DrawPlane((Vector3){0,0,0}, (Vector2){50,50}, LIGHTGRAY);
    DrawCube(player.position,1.0f,2.0f,1.0f,BLUE);
    DrawHealthBar(player.position,player.health,player.stats.maxHealth);

    for (int i=0;i<MAX_ENEMIES;i++)
        if (enemies[i].active) {
            Color c = enemies[i].staggered? ORANGE : RED;
            DrawCube(enemies[i].position,1.0f,2.0f,1.0f,c);
            DrawHealthBar(enemies[i].position,enemies[i].health,50);
        }

    for (int i=0;i<MAX_FIREBALLS;i++)
        if (fireballs[i].active)
            DrawSphere(fireballs[i].position,0.3f,PURPLE);
}

void DrawHealthBar(Vector3 position,int health,int maxHealth)
{
    Vector2 screenPos = GetWorldToScreen((Vector3){position.x,position.y+2.3f,position.z},camera);
    DrawRectangle(screenPos.x-25,screenPos.y,50,7,RED);
    DrawRectangle(screenPos.x-25,screenPos.y,(float)health/maxHealth*50,7,GREEN);
}

void ResetGame(void){ InitGame(); }

// --- Perks ---
void UpdatePerkMenu(void)
{
    if (IsKeyPressed(KEY_RIGHT)) { selectedCategory=(selectedCategory+1)%5; selectedPerk=-1; }
    if (IsKeyPressed(KEY_LEFT)) { selectedCategory=(selectedCategory+4)%5; selectedPerk=-1; }

    if (IsKeyPressed(KEY_ONE)) selectedCategory=0;
    if (IsKeyPressed(KEY_TWO)) selectedCategory=1;
    if (IsKeyPressed(KEY_THREE)) selectedCategory=2;
    if (IsKeyPressed(KEY_FOUR)) selectedCategory=3;
    if (IsKeyPressed(KEY_FIVE)) selectedCategory=4;

    for (int i=0;i<PERKS_PER_CATEGORY;i++) {
        Vector2 center={(float)(150+i*120),200};
        if (CheckCollisionPointCircle(mousePos,center,PERK_ICON_RADIUS))
            if (IsMouseButtonPressed(MOUSE_LEFT_BUTTON)) selectedPerk=i;
    }

    if (selectedPerk>=0 && IsKeyPressed(KEY_ENTER) && player.perkPoints>0) {
        if (player.perks[selectedCategory] != selectedPerk) {
            Perk *p = &perkCategories[selectedCategory].perks[selectedPerk];
            if (player.level>=p->levelRequired) {
                player.perks[selectedCategory]=selectedPerk;
                player.perkPoints--;
                ApplyPerkEffects();
            }
        }
    }
}

void DrawPerkMenu(void)
{
    DrawRectangle(50,50,GetScreenWidth()-100,GetScreenHeight()-100,Fade(DARKGRAY,0.9f));
    DrawText("PERKS MENU - Press Z to close",60,60,20,YELLOW);
    DrawText(TextFormat("Player Level: %d  Perk Points: %d",player.level,player.perkPoints),60,90,18,WHITE);

    for (int i=0;i<player.perkPoints;i++) DrawCircle(100+i*20,150,6,YELLOW);
    DrawText("Perk Points",60,140,12,WHITE);

    for (int i=0;i<5;i++) {
        Color catColor = (i==selectedCategory)? GOLD : LIGHTGRAY;
        DrawText(perkCategories[i].name,60+i*150,130,22,catColor);
    }

    for (int i=0;i<PERKS_PER_CATEGORY;i++) {
        Vector2 center={(float)(150+i*120),200};
        Color bgColor = LIGHTGRAY;
        if (player.perks[selectedCategory]==i) bgColor=GREEN;
        if (selectedPerk==i) bgColor=GOLD;
        DrawCircleV(center,PERK_ICON_RADIUS,bgColor);
        DrawText(perkCategories[selectedCategory].perks[i].name,center.x-50,center.y+30,14,WHITE);
        DrawText(TextFormat("Lvl %d",perkCategories[selectedCategory].perks[i].levelRequired),center.x-20,center.y+45,12,RAYWHITE);

        if (selectedPerk==i) {
            DrawRectangle(150,300,GetScreenWidth()-300,100,Fade(BLACK,0.7f));
            DrawText(perkCategories[selectedCategory].perks[i].description,160,310,18,WHITE);
            DrawText("Press ENTER to purchase/apply",160,340,14,LIGHTGRAY);
        }
    }
}

void ApplyPerkEffects(void)
{
    player.stats.lightDamage=10;
    player.stats.heavyDamage=25;
    player.stats.fireballDamage=40;
    player.stats.moveSpeed=5.0f;
    player.stats.maxHealth=100;
    player.stats.blockDamageReduction=0.5f;

    switch(player.perks[0]){
        case 0: player.stats.lightDamage+=5; break;
        case 1: player.stats.heavyDamage+=10; break;
        case 2: player.stats.blockDamageReduction=0.8f; break;
    }
    if(player.perks[1]==0) player.stats.fireballDamage+=10;
    if(player.perks[2]==1) player.stats.maxHealth+=20;

    switch(player.perks[4]){
        case 0:
            player.stats.lightDamage=(int)(player.stats.lightDamage*1.15f);
            player.stats.heavyDamage=(int)(player.stats.heavyDamage*1.15f);
            player.stats.fireballDamage=(int)(player.stats.fireballDamage*1.15f);
            break;
        case 1: player.stats.moveSpeed*=1.2f; break;
        case 2: player.stats.maxHealth+=50; break;
    }

    if(player.health>player.stats.maxHealth) player.health=player.stats.maxHealth;
}

// --- Main Menu ---
void UpdateMainMenu(void)
{
    if (IsKeyPressed(KEY_DOWN)) mainMenuSelection = (mainMenuSelection + 1) % 3;
    if (IsKeyPressed(KEY_UP)) mainMenuSelection = (mainMenuSelection + 2) % 3;

    if (IsKeyPressed(KEY_ENTER) || IsMouseButtonPressed(MOUSE_LEFT_BUTTON)) {
        switch(mainMenuSelection) {
            case 0: currentScreen = MENU_GAME; break;
            case 1: currentScreen = MENU_SETTINGS; settingsMenuSelection=0; break;
            case 2: currentScreen = MENU_EXIT; break;
        }
    }
}

void DrawMainMenu(void)
{
    DrawText("THE RECKONING", screenWidth/2 - 150, 100, 50, GOLD);

    const char* options[3] = {"Start Game","Settings","Exit"};
    for (int i=0;i<3;i++) {
        Color col = (i==mainMenuSelection)? GOLD : LIGHTGRAY;
        DrawText(options[i], screenWidth/2 - 80, 250 + i*60, 30, col);
    }
}

// --- Settings Menu ---
void UpdateSettingsMenu(void)
{
    if (IsKeyPressed(KEY_DOWN)) settingsMenuSelection = (settingsMenuSelection + 1) % 4;
    if (IsKeyPressed(KEY_UP)) settingsMenuSelection = (settingsMenuSelection + 3) % 4;

    if (IsKeyPressed(KEY_ENTER) || IsMouseButtonPressed(MOUSE_LEFT_BUTTON)) {
        switch(settingsMenuSelection) {
            case 0: currentScreen = MENU_AUDIO; break;
            case 1: currentScreen = MENU_VIDEO; break;
            case 2: currentScreen = MENU_DIFFICULTY; break;
            case 3: currentScreen = MENU_START; break;
        }
    }
    if (IsKeyPressed(KEY_ESCAPE)) currentScreen = MENU_START;
}

void DrawSettingsMenu(void)
{
    DrawText("SETTINGS", screenWidth/2 - 80, 100, 50, GOLD);
    const char* options[4] = {"Audio","Video","Difficulty","Back"};
    for (int i=0;i<4;i++) {
        Color col = (i==settingsMenuSelection)? GOLD : LIGHTGRAY;
        DrawText(options[i], screenWidth/2 - 80, 250 + i*60, 30, col);
    }
}

// --- Audio Menu ---
void UpdateAudioMenu(void)
{
    if (IsKeyPressed(KEY_ESCAPE)) currentScreen = MENU_SETTINGS;
}

void DrawAudioMenu(void)
{
    DrawText("AUDIO SETTINGS - Press ESC to go back", 50,50,20,YELLOW);
    DrawText(TextFormat("Master Volume: %.1f",masterVolume), 100,150,20,WHITE);
    DrawText(TextFormat("Music Volume: %.1f",musicVolume), 100,200,20,WHITE);
    DrawText(TextFormat("SFX Volume: %.1f",sfxVolume), 100,250,20,WHITE);
}

// --- Video Menu ---
void UpdateVideoMenu(void)
{
    if (IsKeyPressed(KEY_ESCAPE)) currentScreen = MENU_SETTINGS;
}

void DrawVideoMenu(void)
{
    DrawText("VIDEO SETTINGS - Press ESC to go back",50,50,20,YELLOW);
    DrawText(TextFormat("Resolution: %dx%d",screenWidth,screenHeight), 100,150,20,WHITE);
    DrawText(TextFormat("Fullscreen: %s", fullscreen?"ON":"OFF"), 100,200,20,WHITE);
}

// --- Difficulty Menu ---
void UpdateDifficultyMenu(void)
{
    if (IsKeyPressed(KEY_ESCAPE)) currentScreen = MENU_SETTINGS;
}

void DrawDifficultyMenu(void)
{
    DrawText("DIFFICULTY SETTINGS - Press ESC to go back",50,50,20,YELLOW);
    const char* diffs[8] = {"Practise","Easy","Normal","Hard","Insane","Nightmare","DeathWish","Armagedon"};
    for(int i=0;i<3;i++) {
        Color col = (i==difficulty)? GOLD : LIGHTGRAY;
        DrawText(diffs[i],100,150+i*50,20,col);
    }
}
void difficultySelector (difficulty diff) {
    if(diff==Practise){
        player.stats.maxHealth=100;
        enemies.stats.enemySpeed=50;
        enemies.stats.enemyVelocity=40; 
        player.stats.playerSpeed=100;
        player.stats.fireballDamage=500;
        player.stats.lightDamage=400;
        player.stats.heavyDamage=400;
        enemies.stats.lightDamage=10;
        enemies.stats.heavyDamage=10;        
    }
    if (diff == Easy) {
        player.stats.maxHealth=50;
        enemies.stats.enemySpeed=60;
        enemies.stats.enemyVelocity=40; 
        player.stats.playerSpeed=80;
        player.stats.fireballDamage=300;
        player.stats.lightDamage=200;
        player.stats.heavyDamage=200;
        enemies.stats.lightDamage=20;
        enemies.stats.heavyDamage=20;  
    }
    if(diff==Normal){
        player.stats.maxHealth=40;
        enemies.stats.enemySpeed=70;
        enemies.stats.enemyVelocity=40; 
        player.stats.playerSpeed=50;
        player.stats.fireballDamage=100;
        player.stats.lightDamage=100;
        player.stats.heavyDamage=100;
        enemies.stats.lightDamage=50;
        enemies.stats.heavyDamage=50;
    }
    if (diff == Hard) {
       player.stats.maxHealth=40;
        enemies.stats.enemySpeed=80;
        enemies.stats.enemyVelocity=40; 
        player.stats.playerSpeed=40;
        player.stats.fireballDamage=30;
        player.stats.lightDamage=30;
        player.stats.heavyDamage=30;
        enemies.stats.lightDamage=100;
        enemies.stats.heavyDamage=100; 
    }
    if(diff==Insane){ 
        player.stats.maxHealth=20;
        enemies.stats.enemySpeed=100;
        enemies.stats.enemyVelocity=40; 
        player.stats.playerSpeed=20;
        player.stats.fireballDamage=10;
        player.stats.lightDamage=10;
        player.stats.heavyDamage=10;
        enemies.stats.lightDamage=200;
        enemies.stats.heavyDamage=200;
    }
    if(diff==Nightmare){ 
        player.stats.maxHealth=10;
        enemies.stats.enemySpeed=300;
        enemies.stats.enemyVelocity=40; 
        player.stats.playerSpeed=10;
        player.stats.fireballDamage=5;
        player.stats.lightDamage=5;
        player.stats.heavyDamage=5;
        enemies.stats.lightDamage=400;
        enemies.stats.heavyDamage=400;
    }
    if(diff==DeathWish){
        player.stats.maxHealth=5;
        enemies.stats.enemySpeed=500;
        enemies.stats.enemyVelocity=40; 
        player.stats.playerSpeed=5;
        player.stats.fireballDamage=2;
        player.stats.lightDamage=2;
        player.stats.heavyDamage=2;
        enemies.stats.lightDamage=600;
        enemies.stats.heavyDamage=600;            
    }
    if(diff==Armagedon){
        player.stats.maxHealth=1;
        enemies.stats.enemySpeed=5000;
        enemies.stats.enemyVelocity=40; 
        player.stats.playerSpeed=1;
        player.stats.fireballDamage=1;
        player.stats.lightDamage=1;
        player.stats.heavyDamage=1;
        enemies.stats.lightDamage=1000;
        enemies.stats.heavyDamage=1000;             
    }
